---
layout: post
title: "计算机网络——网络层：控制平面"
---

## 概述

在本文中，我们将研究网络层的控制平面：即路由器如何决定其转发表。
我们知道，计算转发表的方式主要有两种，即让路由器自发决定和通过逻辑集中式控制器计算。
前者需要路由器和其他网络中的路由通信以计算转发表，这是由路由器的控制平面通过OSPF和BGP等*路由选择算法*完成的，且已经在互联网上使用许久了。
后者需要路由器和*逻辑集中式路由选择控制器*通信，控制器通过某些协议和数据平面的*控制代理*（Control Agent）通信，然后由CA配置和管理转发表，这意味着路由器本身不具有控制平面的功能，而是完全交由服务器控制。
这种控制方法还允许转发表进行复杂的动作，正如前文末尾所述。
SDN就是采用的后者的控制逻辑，而且已经在ISP中得到广泛使用。

## 路由选择算法

在本节中，我们将概述路由选择算法，并介绍两种最简单的算法以明确其思想。
在之后的章节中，我们还将介绍两个实际使用在互联网中的算法：OSPF与BGP。

我们使用无向图$G = (V,E)$来代表网络，其中$V$是顶点（Vertex，也称节点，Node）集合，而$E$是边集合。
图中的顶点表示路由器，而边表示一条物理链路，因此我们假设这个图没有重边与自环。
这个无向图是带有边权的，用来表示开销，这个值可能表示链路的物理长度、金钱开销或速度。
我们用$c(x,y),\, x,y \in V$来表示两个点之间的边的权值或耗费。
特别地，如果两个顶点之间没有边，那么规定$c(x,y) = \infty$；
同时规定$c(x,x) = 0$。
若两个顶点之间存在一条边，那么我们称这两个点为**邻居**（Neighbor）。

我们规定**路径**（Path）为一个顶点的有限有序序列$(x\_1,x\_2,\cdots,x\_p)$，其中任意两个相邻的顶点都是邻居，即$(x\_i,x\_{i+1}) \in E$。
我们称节点$x\_1$为起点，$x\_p$为终点。
我们额外规定路径必须是*简单*的，即其顶点序列中不含有重复的顶点。
路径的权值就是其所有边的权值的总和。
对于联通的图，任意两点之间必然存在路径，而这些路径中权值最短者就是**最短路径**。

路由选择算法就是要求在这样的一张图上选择出给定起点和终点之间的一条路径，当然，我们希望路径的耗费越短越好。

总的来说，路由选择算法有三种分类方式：
1. 集中式和分散式：
   1. **集中式路由选择算法**使用完整的、全局性的信息计算从源到目的地之间的最短路径，这种算法可以在路由器的路由选择处理器中执行，也可以在某个集中的设备上进行。这种算法也叫**链路状态**（Link State，LS）算法。
   2. **分散式路由选择算法**以迭代、分布式的方法计算最短路径。单个路由器并不具有整个网络的状态信息，相对地，仅仅需要其邻居的信息即可工作。最常见的分散式算法为**距离向量**（Distance Vector，DV）算法。
2. 静态和动态：
   **静态路由选择算法**计算出的结果，即路由，随时间的变化较慢，通常仅由人工进行调整；
   而**动态路由选择算法**在进行路由时会因网络的流量负载或拓扑变化而快速做出反应。
3. 负载敏感与负载迟钝：
   **负载敏感算法**中的链路开销会考虑到底层链路的拥塞水平，从而趋向于避开拥塞的链路；
   **负载迟钝算法**中的链路开销不会动态考虑链路的拥塞水平。
   早期互联网采用负载敏感算法，但是产生了许多问题，因此当前流行的算法都是负载迟钝的。

### 链路状态算法

链路状态算法有许多，此处我们介绍最常见的Dijkstra算法。

### 距离向量算法

距离向量算法本质上是分布式的Bellman-Ford算法。

