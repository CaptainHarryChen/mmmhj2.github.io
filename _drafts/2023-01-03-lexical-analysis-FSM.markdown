---
layout: post
title: "词法分析——有限自动机"
---

本文中我们研究如何使用有限状态自动机进行词法分析。
有限状态机（Finite State Machine, FSM）、有限状态自动机（Finite State Automaton，FSA）和有限（有穷）自动机（Finite Automaton）的所指基本相同[^1]，本文不加以区分。

[^1]:准确地说，本文研究的是自动机的一个子集：识别器。参见[有限状态机（维基百科）](https://en.wikipedia.org/wiki/Finite-state_machine)。

## 有限状态自动机

有穷自动机和状态转移图类似，只是有以下一点不同：
自动机是*识别器*，它们对每个输入串只能回答“是”（到达接受状态）或“否”（不能到达接受状态）。
不同于转移图，它们不能在到达某个状态后执行操作。

形式化地说，**有穷自动机**是一个五元组$(\Sigma, S, s_0, \delta , F)$。
$\Sigma$是一个有限非空集合，称为*字母表*；
$S$是一个有限非空集合，称为*状态集*；
$s_0 \in S$称为*开始状态*；
$\delta$是一个从$S \times \Sigma$到$S$的一个元素或一个子集的映射，称为*状态转移函数*；
$F$为*接受状态*的集合，可以为空。
特别地，如果$\delta$的像是状态（即$S$的元素）且字母表中不含空串，那么称这个自动机是**确定**的；
如果$\delta$的像是状态的集合（即$S$的子集）或字母表中含有空串$\epsilon$，那么称这个自动机是**非确定**的。
{: .definition}

所谓*确定有穷自动机*（Deterministic FA，DFA），就是给出目前状态和输入，可以确定下一个状态；
所谓*非确定有穷自动机*（Non-deterministic FA，NFA），就是给出目前状态和输入，不能确定下一个状态，只能确定可能的下一个状态（即状态的集合）。
由于空串可能在边的标号上存在，所以即使状态转移函数的像都是单个状态，依然不能唯一确定下一个状态。

虽然如此分类，实际上确定和非确定的有穷自动机能识别的语言是相同的，且通常我们希望将NFA转化为DFA，因为模拟DFA远比模拟NFA方便。
本文后面会介绍将转化的方法。

### 状态图与状态表
、
### 模拟DFA

## 从正则表达式到自动机

### 从NFA到DFA

### 模拟NFA

### 由正则表达式构造NFA

## 自动机的优化

### 直接从正则表达式构造DFA
